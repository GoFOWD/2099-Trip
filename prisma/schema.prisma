generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Schedule {
  id        String         @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  budgets   Budget[]
  AirTicket AirTicket[]
  Hotel     Hotel[]
  Country   Country[]
  Tour      Tour[]
  userId    String
  User      User      @relation(fields: [userId], references: [id])
}

enum TripType {
  ONE_WAY
  ROUND_TRIP
}

model AirTicket {
  id         String             @id @default(cuid())
  price      Int
  airline    String
  tripType   TripType
  segments   flightSegment[]
  scheduleId String
  countryId  String
  Schedule   Schedule        @relation(fields: [scheduleId], references: [id])
  Country    Country         @relation(fields: [countryId], references: [id])
}

model flightSegment {
  id               String       @id @default(cuid())
  departurePort    String
  arrivalPort      String
  departureCountry String
  arrivalCountry   String
  departureDate    DateTime
  arrivalDate      DateTime
  flightNumber     String
  airTicketId      String
  airTicket        AirTicket @relation(fields: [airTicketId], references: [id])
}

model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  password             String
  name                 String?
  haveReservedAirLine  Boolean    @default(false)
  haveReservedionHotel Boolean    @default(false)
  haveReservedTour     Boolean    @default(false)
  schedules            Schedule[]
  diaries              Diary[]
  countries            Country[]
}

model Tour {
  id         String   @id @default(cuid())
  reservedAt DateTime
  location   String
  rating     Float?
  price      String

  scheduleId    String
  schedule      Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  countryId String
  country   Country @relation(fields: [countryId], references: [id])
}

model Diary {
  id        String   @id @default(cuid())
  title     String
  content   String
  date      String
  pic       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Hotel {
  id        String    @id @default(cuid())
  name      String
  price     Float?
  rating    Float?
  checkIn   String?
  checkOut  String?
  location  String
  countryId String?
  scheduled String?
  amenities Amenity[]

  schedules  Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
}

model Amenity {
  id          String  @id @default(cuid())
  Amenityname String
  hotels      Hotel[]
}

model Budget {
  id String @id @default(cuid())
  airTicketPlan Int
  hotelPlan Int
  actualHotelSpending Int
  totalBudget Int
  actualAirTicketSpending Int
  actualTourSpending Int
  otherSpending Int
  scheduleId String
  schedule Schedule @relation(fields: [scheduleId], references: [id])
}


model Country {
  id               String   @id @default(cuid())
  countryCode      String   @unique
  name             String
  nameKo           String?     
  embassyLocation  String?
  emergencyNumber  String?

  userId  String
  user    User     @relation(fields: [userId], references: [id])

  cautions   Caution[]
  languages  CountryLanguage[]
  tours      Tour[]
  airTickets AirTicket[]
  schedule   Schedule[]
}

model Language {
  id        String     @id @default(cuid())
  code      String  @unique
  name      String
  countries CountryLanguage[]
}

model CountryLanguage {
  countryId  String
  languageId String
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  isOfficial Boolean  @default(false)
  notes      String?
  @@id([countryId, languageId])
  @@index([languageId])
}

model Caution {
  id         String      @id @default(cuid())
  countryId  String
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  title      String
  content    String
  @@index([countryId])
}
