generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Schedule {
  id        String         @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  budgets   Budget[]
  AirTicket airTicket[]
  Hotel     Hotel[]
  Country   Country[]
  Tour      Tour[]
  userId    String
  User      User      @relation(fields: [userId], references: [id])
}

enum TripType {
  ONE_WAY
  ROUND_TRIP
}

model AirTicket {
  id         String             @id @default(cuid())
  price      Int
  airline    String
  tripType   TripType
  segments   flightSegment[]
  scheduleId String
  countryId  String
  Schedule   Schedule        @relation(fields: [scheduleId], references: [id])
  Country    Country         @relation(fields: [countryId], references: [id])
}

model flightSegment {
  id               String       @id @default(cuid())
  departurePort    String
  arrivalPort      String
  departureCountry String
  arrivalCountry   String
  departureDate    DateTime
  arrivalDate      DateTime
  flightNumber     String
  airTicketId      String
  airTicket        AirTicket @relation(fields: [airTicketId], references: [id])
}

model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  password             String
  name                 String?
  haveReservedAirLine  Boolean    @default(false)
  haveReservedionHotel Boolean    @default(false)
  haveReservedTour     Boolean    @default(false)
  schedules            Schedule[]
  diaries              Diary[]
}

model Tour {
  id         String   @id @default(cuid())
  reservedAt DateTime
  location   String
  rating     Float?
  price      String

  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  countryId String
  country   Country @relation(fields: [countryId], references: [id])
  // ▼ 추가 (Schedule과 연결)
  scheduleId Int?
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
}

/* === Country 도메인 4종 === */
model Country {
  id               String   @id @default(cuid())
  countryCode      String   @unique
  name             String
  nameKo           String?     // ← 추가: 한국어표시
  embassyLocation  String?
  emergencyNumber  String?

  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  cautions   Caution[]
  languages  CountryLanguage[]
  tours      Tour[]
  airTickets AirTicket[]
}

model Language {
  id        Int     @id @default(autoincrement())
  code      String  @unique
  name      String
  countries CountryLanguage[]
}

model CountryLanguage {
  countryId  String
  languageId Int
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  isOfficial Boolean  @default(false)
  notes      String?
  @@id([countryId, languageId])
  @@index([languageId])
}

model Caution {
  id         Int      @id @default(autoincrement())
  countryId  String
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  title      String
  content    String
  createdAt  DateTime @default(now())
  @@index([countryId])
}

/* 나중에 만들면 주석 해제
model Budget { ... }
model Hotel  { ... }
model Diary  { ... }
*/
